language: python
python:
  - "3.8.2"

os: linux
dist: xenial

services:
  - docker

import:
  - Alfresco/alfresco-process-tools:.travis.helm.yml@master
  - Alfresco/alfresco-process-tools:.travis.kubernetes_install.yml@master
  - Alfresco/alfresco-process-tools:.travis.docker_login.yml@master

env:
  global:
    - TRAVIS_WAIT_TIMEOUT=${TRAVIS_WAIT_TIMEOUT:-30}
    - BRANCH=${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_BRANCH}}
    - HELM_REPO_BASE_URL=https://kubernetes-charts.alfresco.com
    - HELM_REPO=stable
    - KUBERNETES_VERSION=1.18.4
    - HELM_VERSION=${HELM_VERSION:-3.2.4}

branches:
  only:
    - OPSEXP-115

before_install:
  - |
    pip install --upgrade awscli
    curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/aws-iam-authenticator
    curl -o aws-iam-authenticator.sha256 https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/aws-iam-authenticator.sha256
    openssl sha1 -sha256 aws-iam-authenticator
    chmod +x ./aws-iam-authenticator
    mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
    export PATH=$PATH:$HOME/bin
    aws eks update-kubeconfig --name acs-cluster --region=eu-west-1

before_script:
  - |
    REPO_NAME=${TRAVIS_REPO_SLUG##*/}
    PROJECT_NAME=alfresco-content-services
    helm repo add activiti https://activiti.github.io/activiti-cloud-helm-charts
    helm repo add alfresco ${HELM_REPO_BASE_URL}/stable
    helm repo add stable https://kubernetes-charts.storage.googleapis.com
    if [[ "${TRAVIS_BRANCH}" != *"support/"* ]]
    then
      export HELM_REPO=incubator
      helm repo add alfresco-incubator ${HELM_REPO_BASE_URL}/${HELM_REPO}
    fi
    helm repo update
    echo using PROJECT_NAME=${PROJECT_NAME},BRANCH=${BRANCH},HELM_REPO=${HELM_REPO}

jobs:
  include:
    - name: Deploy Chart and Run Postman Checks
      stage: test
      script: |
        set -e
        namespace=$(echo ${TRAVIS_BRANCH} | cut -c1-28 | tr /_ - | tr -d [:punct:] | awk '{print tolower($0)}')-${TRAVIS_BUILD_NUMBER}
        release_name_ingress=$(openssl rand 200 | LC_CTYPE=C tr -dc "[:lower:]" | head -c 3)-ing
        release_name_acs=$(openssl rand 200 | LC_CTYPE=C tr -dc "[:lower:]" | head -c 3)-acs

        kubectl create namespace "$namespace"
        kubectl create secret docker-registry quay-registry-secret --docker-server=${DOCKER_REGISTRY} --docker-username=${DOCKER_REGISTRY_USERNAME} --docker-password=${DOCKER_REGISTRY_PASSWORD} -n "$namespace"
        kubectl -n $namespace create role $namespace:psp --verb=use --resource=podsecuritypolicy --resource-name=kube-system
        kubectl -n $namespace create rolebinding $namespace:psp:default --role=$namespace:psp --serviceaccount=$namespace:default
        kubectl -n $namespace create rolebinding $namespace:psp:$release_name_ingress-nginx-ingress --role=$namespace:psp --serviceaccount=$namespace:$release_name_ingress-nginx-ingress
        
        # install ingress
        helm install $release_name_ingress stable/nginx-ingress \
        --set controller.scope.enabled=true \
        --set controller.scope.namespace=$namespace \
        --set rbac.create=true \
        --set controller.config."proxy-body-size"="100m" \
        --set controller.service.targetPorts.https=80 \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-backend-protocol"="http" \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-ssl-ports"="https" \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-ssl-cert"="${ACM_CERTIFICATE}" \
        --set controller.service.annotations."external-dns\.alpha\.kubernetes\.io/hostname"="$namespace.dev.alfresco.me" \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-ssl-negotiation-policy"="ELBSecurityPolicy-TLS-1-2-2017-01" \
        --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-security-groups"="${AWS_SG}" \
        --set controller.publishService.enabled=true \
        --wait \
        --atomic \
        --namespace $namespace

        # install acs
        helm install $release_name_acs helm/alfresco-content-services \
        --set externalPort="443" \
        --set externalProtocol="https" \
        --set externalHost="$namespace.dev.alfresco.me" \
        --set persistence.enabled=true \
        --set persistence.storageClass.enabled=true \
        --set persistence.storageClass.name="nfs-client" \
        --set global.alfrescoRegistryPullSecrets=quay-registry-secret \
        --wait \
        --timeout 10m0s \
        --atomic \
        --dependency-update \
        --namespace=$namespace
        
        # dns propagation check
        DNS_PROPAGATED=0
        DNS_COUNTER=0
        DNS_COUNTER_MAX=90
        DNS_SLEEP_SECONDS=10
        
        echo "Trying to perform a trace DNS query to prevent caching"
        dig +trace $namespace.dev.alfresco.me @8.8.8.8
        
        while [ "$DNS_PROPAGATED" -eq 0 ] && [ "$DNS_COUNTER" -le "$DNS_COUNTER_MAX" ]; do
          host $namespace.dev.alfresco.me 8.8.8.8
          if [ "$?" -eq 1 ]; then
            DNS_COUNTER=$((DNS_COUNTER + 1))
            echo "DNS Not Propagated - Sleeping $DNS_SLEEP_SECONDS seconds"
            sleep "$DNS_SLEEP_SECONDS"
          else
            echo "DNS Propagated"
            DNS_PROPAGATED=1
          fi
        done
        
        [ $DNS_PROPAGATED -ne 1 ] && echo "DNS entry for $namespace.dev.alfresco.me did not propagate within expected time"
        
        # run acs checks
        docker run -a STDOUT --volume $PWD/test/postman/helm:/etc/newman --network host postman/newman_alpine33:3.9.2 run "acs-test-helm-collection.json" --global-var "protocol=https" --global-var "url=$namespace.dev.alfresco.me"
        
        # delete pods
        kubectl delete pod -l app=$release_name_acs-alfresco-cs-repository,component=repository -n $namespace
        kubectl delete pod -l app=postgresql-acs,release=$release_name_acs -n $namespace
        helm upgrade $release_name_acs helm/alfresco-content-services \
        --wait \
        --timeout 10m0s \
        --atomic \
        --reuse-values \
        --namespace=$namespace
        
        # run checks after pod deletion
        docker run -a STDOUT --volume $PWD/test/postman/helm:/etc/newman --network host postman/newman_alpine33:3.9.2 run "acs-validate-volume-collection.json" --global-var "protocol=https" --global-var "url=$namespace.dev.alfresco.me"

      after_success: |
        helm delete $release_name_ingress $release_name_acs -n $namespace
        kubectl delete namespace $namespace

    - name: Deploy Docker Compose and Run Postman Checks
      stage: test
      script: |
        cd docker-compose
        /bin/bash startup.sh
        cd ../test/postman/docker-compose
        docker run -a STDOUT --volume $PWD:/etc/newman --network host postman/newman_alpine33:3.9.2 run "acs-test-docker-compose-collection.json" --insecure --global-var "protocol=http" --global-var "url=localhost:8080"
      after_failure: |
        docker-compose logs --no-color
        helm install $release_name_ingress stable/nginx-ingress --set controller.scope.enabled=true --set controller.scope.namespace=$namespace --set rbac.create=true --set controller.config."proxy-body-size"="100m" --set controller.service.targetPorts.https=80 --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-backend-protocol"="http" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-ssl-ports"="https" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-ssl-cert"="arn:aws:acm:eu-west-1:586394462691:certificate/d359dcdc-9eab-44c7-a51d-10e51be01cf1" --set controller.service.annotations."external-dns\.alpha\.kubernetes\.io/hostname"="$namespace.dev.alfresco.me" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-ssl-negotiation-policy"="ELBSecurityPolicy-TLS-1-2-2017-01" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-security-groups"="sg-014a4c15b31f0c3ea" --set controller.publishService.enabled=true --namespace $namespace