---
name: Helm (Enterprise)
on:
  pull_request:
    branches:
      - master
      - release/**
      - next/**
    paths:
      - helm/**
      - test/postman/helm/**
      - .github/workflows/helm*
      - .github/actions/charts-as-json/**
      - test/enterprise-integration-test-values.yaml
  push:
    branches:
      - master
      - release/**
concurrency:
  group: helm-ent-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true
jobs:
  build_vars:
    runs-on: ubuntu-latest
    if: >-
      github.event_name == 'push'
      || (
        ! github.event.pull_request.head.repo.fork
        && github.actor != 'dependabot[bot]'
      )
    outputs:
      ver_json: ${{ steps.app_versions.outputs.json }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 0
      - name: Get charts
        id: getcharts
        uses: ./.github/actions/charts-as-json
        with:
          charts-root: helm
      - name: Select ACS enterprise versions excluding any deprecated versions
        id: app_versions
        env:
          JSON: ${{ toJSON(fromJSON(steps.getcharts.outputs.all)) }}
          JQ_FILTER: >-
            [inputs | .charts[] | {name: .name, values: .values[]}
            | del(. | select(.values=="community_values.yaml"))
            | select(.name=="alfresco-content-services")]
        run: |
          echo "${JSON}" | jq -nc '${{ env.JQ_FILTER }}'
          VERS=$(echo "${JSON}" | jq -nc '${{ env.JQ_FILTER }}')
          echo "json=$VERS" >> $GITHUB_OUTPUT

  helm_integration:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - build_vars
    name: ${{ matrix.values }} on ${{ matrix.name }}
    env:
      REGISTRY_SECRET_NAME: regcred
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.build_vars.outputs.ver_json) }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4
        with:
          version: "3.14.3"

      - name: Login to Docker Hub
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3.5.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Quay.io
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3.5.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Setup cluster
        uses: Alfresco/alfresco-build-tools/.github/actions/setup-kind@v8.32.1
        with:
          ingress-nginx-ref: controller-v1.12.1
          metrics: "true"
          import-docker-credentials-secret-name: ${{ env.REGISTRY_SECRET_NAME }}

      - name: Set nginx ingress config
        run: |
          kubectl -n ingress-nginx patch cm ingress-nginx-controller \
            -p '{"data": {"annotations-risk-level":"Critical","allow-snippet-annotations":"true"}}'

      - name: Check if we want additional helm customizations
        id: configurable-extra-values
        run: |
          if [ "${{ matrix.values }}" = "pre-release_values.yaml" ] || [ "${{ matrix.values }}" = "values.yaml" ]; then
            echo "Enabling clustered tests with 2 replicas"
            echo "helm_install_params=--set alfresco-repository.replicaCount=2" >> "$GITHUB_OUTPUT"
          fi

      - name: Add dependency chart repos
        run: |
          helm repo add self https://alfresco.github.io/alfresco-helm-charts/
          helm repo add elastic https://helm.elastic.co/

      - name: Helm install
        run: >-
          helm dep build ./helm/alfresco-content-services &&
          helm install acs ./helm/alfresco-content-services
          --set global.search.sharedSecret="$(openssl rand -hex 24)"
          --set global.known_urls=http://localhost
          --set global.alfrescoRegistryPullSecrets=${{ env.REGISTRY_SECRET_NAME }}
          --set global.imagePullSecrets[0]=${{ env.REGISTRY_SECRET_NAME }}
          --values helm/${{ matrix.name }}/${{ matrix.values }}
          --values test/enterprise-integration-test-values.yaml
          ${{ steps.configurable-extra-values.outputs.helm_install_params }}

      - name: Setup tmate session
        if: matrix.values == 'values.yaml'
        uses: mxschmitt/action-tmate@v3

      - name: Wait for pods to be ready
        uses: Alfresco/alfresco-build-tools/.github/actions/kubectl-wait@v8.32.1

      - name: Spit cluster status after install
        if: always()
        run: |
          helm ls --all-namespaces --all
          helm status acs --show-resources

      - name: Run Newman tests
        uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3.0.2
        id: newman
        with:
          timeout_minutes: 1
          retry_wait_seconds: 20
          max_attempts: 5
          command: >-
            docker run --network=host
            -v $(pwd)/test/postman:/etc/postman
            -t postman/newman run /etc/postman/helm/acs-test-helm-collection.json
            --global-var protocol=http --global-var url=localhost

      - name: Spit cluster status after newman tests
        if: always() && steps.newman.outcome != 'skipped'
        run: |
          kubectl get all --all-namespaces
          kubectl describe pod
          kubectl events --for deployment/acs-alfresco-repository

      - name: Run helm test
        id: helm_test
        run: helm test acs

      - name: Spit cluster status after helm test
        if: always() && steps.helm_test.outcome != 'skipped'
        run: |
          kubectl logs -l app.kubernetes.io/component=dtas --tail=-1
          kubectl get all --all-namespaces
          kubectl describe pod
          kubectl events --for deployment/acs-alfresco-repository

      - name: Collect logs from all containers
        if: always()
        run: |
          mkdir -p logs
          for pod in $(kubectl get pods -n default -o jsonpath='{.items[*].metadata.name}'); do
            kubectl logs $pod -n default > logs/${pod}.log
          done

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 #v4.6.2
        with:
          name: k8s-logs${{ matrix.name }}-${{ matrix.values }}
          path: logs
