---
name: Helm charts builds
on:
  pull_request:
    branches:
      - 'master'
  push:
    paths:
      - helm/**
      - test/postman/helm/**
jobs:
  branch:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch.outputs.branch_name }}
      json_charts: ${{ steps.getcharts.outputs.json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Debug action
        uses: hmarr/debug-action@v2.0.1
      - id: branch
        name: Evaluate branch name and set as output
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}
          echo "Branch name is $BRANCH_NAME"
          echo "::set-output name=branch_name::$BRANCH_NAME"
      - id: getcharts
        name: Get main Charts and parse Chart.yaml
        run: |
          set -x
          for CHART_ROOT in helm/alfresco-content-services/; do
            MATRIX_TMP_FILE=$(mktemp /tmp/matrix.XXXXXX)
            CHART=$(basename $CHART_ROOT)
            yq e '{"name": .name,"type": .type, "version": .version} | to_json'\
              "helm/${CHART}/Chart.yaml" | jq -c > /tmp/chart.json
            VALUES_FILES=$(ls helm/"${CHART}"/*values.yaml 2>/dev/null || true)
            VALUES=${VALUES_FILES//${CHART_ROOT}/}
            echo $VALUES_FILES
            echo $VALUES
            [ -n "$VALUES" ] \
              && jq -n --arg v "$VALUES" '{values: $v | split("\n")}' \
              > /tmp/values.json \
              || > /tmp/values.json
            jq -cs 'add' /tmp/chart.json /tmp/values.json >> $MATRIX_TMP_FILE
          done
          echo "::set-output name=json::$(jq -sc '{charts:.}' /tmp/matrix.*)"
  helm_tests:
    name: Helm tests
    uses: ./.github/workflows/helm-tests.yml
    if: |
      ! contains(github.event.head_commit.message, '[skip tests]')
    with:
      chartname: ${{ matrix.charts.name }}
      charttype: ${{ matrix.charts.type }}
      app_versions_matrix: ${{ matrix.charts.values }}
      branch_name: ${{ needs.branch.outputs.branch_name }}
    secrets:
      ACM_CERTIFICATE: ${{ secrets.ACM_CERTIFICATE }}
      AWS_SG: ${{ secrets.AWS_SG }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
      QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
      ACS_CLUSTER_AWS_ACCESS_KEY_ID: |-
        ${{ secrets.ACS_CLUSTER_AWS_ACCESS_KEY_ID }}
      ACS_CLUSTER_AWS_SECRET_ACCESS_KEY: |-
        ${{ secrets.ACS_CLUSTER_AWS_SECRET_ACCESS_KEY }}
    needs:
      - branch
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.branch.outputs.json_charts) }}
