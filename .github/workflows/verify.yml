name: verify
on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - 'master'
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: Alfresco/alfresco-build-tools/.github/actions/setup-helm-docs@v1.6.0
      - uses: Alfresco/alfresco-build-tools/.github/actions/pre-commit@v1.6.0
  branch:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch.outputs.branch_name }}
    steps:
      - id: branch
        name: Evaluate branch name and set as output
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}
          echo "Branch name is $BRANCH_NAME"
          echo "::set-output name=branch_name::$BRANCH_NAME"
  helm:
    needs: [ pre-commit, branch ]
    strategy:
      fail-fast: true
      matrix:
        acs_version:
          - latest
          - 7.2.N
          - 7.1.N
          - 7.0.N
          - 6.2.N
          - community
    runs-on: ubuntu-latest
    env:
      DOMAIN: dev.envalfresco.com
      AWS_ACCESS_KEY_ID: ${{ secrets.ACS_CLUSTER_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.ACS_CLUSTER_AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.3.0
        with:
          config: .github/scripts/setup-kind.yml
      - if: matrix.acs_version != 'community'
        name: Login to Quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Get commit msg
        run: |
          MSG=$(git log --format=%B -n 1 ${{github.event.after}})
          echo COMMIT_MESSAGE=\"$MSG\" >> $GITHUB_ENV
      - name: Run helm chart tests
        run: .github/scripts/helm_install.sh
        shell: bash
        env:
          ACM_CERTIFICATE: ${{ secrets.ACM_CERTIFICATE }}
          AWS_SG: ${{ secrets.AWS_SG }}
          ACS_VERSION: ${{ matrix.acs_version }}
          BRANCH_NAME: ${{ needs.branch.outputs.branch_name }}
  compose:
    needs: [pre-commit, branch]
    strategy:
      fail-fast: true
      matrix:
        acs_version: [latest, 7.2.N, 7.1.N, 7.0.N, 6.2.N, community]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - if: matrix.acs_version != 'community'
        name: Login to Quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Get commit msg
        run: |
          MSG=$(git log --format=%B -n 1 ${{github.event.after}})
          echo COMMIT_MESSAGE=\"$MSG\" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Run Docker Compose tests
        id: compose
        run: .github/scripts/docker_compose.sh
        shell: bash
        env:
          ACS_VERSION: ${{ matrix.acs_version}}
          BRANCH_NAME: ${{ needs.branch.outputs.branch_name }}
  publish:
    needs: [ compose, helm, branch ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get commit msg
        run: |
          MSG=$(git log --format=%B -n 1 ${{github.event.after}})
          echo COMMIT_MESSAGE=\"$MSG\" >> $GITHUB_ENV
      - name: Publish
        run: .github/scripts/publish_chart.sh
        shell: bash
        if: github.ref_name == github.event.repository.default_branch || env.COMMIT_MESSAGE == '[publish]'
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.BOT_GITHUB_USERNAME }}
          GITHUB_EMAIL: ${{ secrets.BOT_GITHUB_EMAIL }}
          BRANCH_NAME: ${{ needs.branch.outputs.branch_name }}
