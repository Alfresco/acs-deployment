# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Define the alfresco-content-repository properties to use in the k8s cluster
# two content repository nodes are started in a cluster by default
repository:
  replicaCount: 2
  image:
    repository: alfresco/alfresco-content-repository
    tag: "6.0.0-RC4"
    pullPolicy: Always
    internalPort: 8080
    hazelcastPort: 5701
  service:
    name: alfresco
    type: ClusterIP
    externalPort: &repositoryExternalPort 80
  ingress:
    path: /alfresco
  environment:
    JAVA_OPTS: " -Dsolr.base.url=/solr
      -Dsolr.secureComms=none
      -Dindex.subsystem.name=solr6
      -Dalfresco.cluster.enabled=true
      -Ddeployment.method=HELM_CHART"
  resources:
    requests:
      memory: "1000Mi"
    limits:
      memory: "4000Mi"

# Declares the alfresco-pdf-renderer service used but content-repository to do transformations for pdf files
alfrescopdfrenderer:
  replicaCount: 1
  image:
    repository: alfresco/alfresco-pdf-renderer
    tag: "0.10"
    pullPolicy: Always
    internalPort: 8090
  service:
    name: alfrescopdfrenderer
    type: ClusterIP
    externalPort: 80
  resources:
    requests:
      memory: "256Mi"
    limits:
      memory: "512Mi"

# Declares the alfresco-imagemagick service used but content-repository to do transformations for image files
imagemagick:
  replicaCount: 1
  image:
    repository: alfresco/alfresco-imagemagick
    tag: "0.10"
    pullPolicy: Always
    internalPort: 8090
  service:
    name: imagemagick
    type: ClusterIP
    externalPort: 80
  resources:
    requests:
      memory: "256Mi"
    limits:
      memory: "512Mi"

# Declares the alfresco-libreoffice service used but content-repository to do transformations for office files
libreoffice:
  replicaCount: 1
  image:
    repository: alfresco/alfresco-libreoffice
    tag: "0.10"
    pullPolicy: Always
    internalPort: 8090
  service:
    name: libreoffice
    type: ClusterIP
    externalPort: 80
  resources:
    requests:
      memory: "256Mi"
    limits:
      memory: "1024Mi"

# Define the alfresco-share properties to use in the k8s cluster
# This is the default presentation layer(UI) of the Alfresco Content Services product
share:
  replicaCount: 1
  image:
    repository: alfresco/alfresco-share
    tag: "6.0.0-rc1"
    pullPolicy: Always
    internalPort: 8080
  service:
    name: share
    type: ClusterIP
    externalPort: 80
  ingress:
    path: /share
  resources:
    requests:
      memory: "1000Mi"
    limits:
      memory: "2500Mi"

# Defines the mounting points for the persistence required by the apps in the cluster
# the alf_data folder from alfresco-content-repository app is mapped to alfresco-content-services/repository-data
persistence:
  existingClaim: "alfresco-volume-claim"
  repository:
    data:
      mountPath: "/usr/local/tomcat/alf_data"
      subPath: "alfresco-content-services/repository-data"

# Settings that define that alfresco-content-services (this helm chart) is dependent of alfresco-infrastructure chart
# alfresco-infrastructure is defined here: https://github.com/Alfresco/alfresco-infrastructure-deployment/tree/master/charts/incubator/alfresco-infrastructure
# This dependency is needed because the alfresco-infrastructure is meant to provide common tools and frameworks to be used
# by all the components in the DBP (https://www.alfresco.com/platform)
# Currently the Alfresco Content Services product helm chart (this chart) only needs
# the persistent volume claim (pvc) definition defined in the infrastructure
alfresco-content-services:
  alfresco-infrastructure:
    enabled: true
# All the components from the alfresco-infrastructure are disabled, because Alfresco Content Services product helm chart
# only needs the pvc defined in the dependency alfresco-infrastructure
alfresco-infrastructure:
  rabbitmq-ha:
    enabled: false
  activemq:
    enabled: false
  alfresco-keycloak:
    enabled: false
  alfresco-activiti-cloud-registry:
    enabled: false
  alfresco-api-gateway:
    enabled: false

alfresco-search:
  enabled: true
  repository:
    # The value for "host" is the name of this chart
    host: alfresco-content-services
    port: *repositoryExternalPort

# choose if you want network policy enabled
networkpolicysetting:
  enabled: true

database:
  type: postgresql

# Defines the properties to be used for the required postgres DB
# Note: the database (tables) information is also saved in the persistent volume claim
postgresql:
  replicaCount: 1
  ## If true, install the postgresql chart alongside Alfresco Content Services
  enabled: true
  nameOverride: postgresql-acs
  imageTag: "10.1"
  postgresUser: alfresco
  postgresPassword: alfresco
  postgresDatabase: alfresco
  persistence:
    existingClaim: "alfresco-volume-claim"
    subPath: "alfresco-content-services/database-data"
  resources:
    requests:
      memory: "250Mi"
    limits:
      memory: "500Mi"
  driver: org.postgresql.Driver

# If there is a need to pull images from a private docker repo, a secret can be defined in helm and passed as an argument
# to the install command:
# e.g.: helm install alfresco-content-services --set registryPullSecrets=private-repo-registry-secret
# or uncomment the following line if you don't want/need to pass it as a parameter on every install command :
# registryPullSecrets: private-repo-registry-secret
# for more information: https://github.com/Alfresco/alfresco-anaxes-shipyard/blob/master/SECRETS.md
