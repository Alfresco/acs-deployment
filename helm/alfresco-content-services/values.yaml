# This is a YAML-formatted file.
# It declares variables to be passed into your templates.
# ACS will be created in a k8s cluster with a minimum of 16GB memory to split
# among below nodes:
# 2 x repository, 1 x share, 1 x postgres and
# 1 x transformers (pdfrenderer, imagemagick, libreoffice, tika, misc)
#
# Limit container memory and assign X percentage to JVM. There are couple of
# ways to allocate JVM Memory for ACS Containers, for example:
# JAVA_OPTS: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
# But, as per Oracle docs
# (https://docs.oracle.com/javase/9/gctuning/parallel-collector1.htm#JSGCT-GUID-CAB83393-3438-44ED-98F0-D15641B43C7D)
# If container memory is not explicitly set, then the above flags will default
# max heap to 1/4th of container's memory which may not be ideal. Hence, setting
# up explicit Container memory and then assigning a percentage of it to the JVM
# for performance tuning.
infrastructure:
  configMapName: &infrastructure_cmName alfresco-infrastructure
database:
  # -- Enable using an external database for Alfresco Content Services. Must disable `postgresql.enabled` when true.
  external: false
  # -- Postgresql jdbc driver name ex: org.postgresql.Driver. It should be available in the container image.
  driver: null
  # -- External Postgresql database user
  user: null
  # -- External Postgresql database password
  password: null
  # -- External Postgresql jdbc url ex: `jdbc:postgresql://oldfashioned-mule-postgresql-acs:5432/alfresco`
  url: null
  # -- Name of the secret managed by this chart
  configMapName: *infrastructure_cmName
  # -- Name of the secret managed by this chart
  secretName: &acs_database_secretName alfresco-cs-database
  # -- An existing secret that contains DATABASE_USERNAME and DATABASE_PASSWORD keys.
  # When using embedded postgres you need to also set `postgresql.existingSecret`.
  existingSecretName: null
# -- Activemq connection details (activemq.enabled msut also be set to false)
messageBroker:
  url: null
  user: null
  password: null
  # -- Name of the secret managed by this chart
  secretName: &acs_messageBroker_secretName acs-alfresco-cs-brokersecret
search:
  # -- Name of the secret managed by this chart
  secretName: &acs_search_secretName solr-shared-secret
alfresco-repository:
  nameOverride: alfresco-repository
  configuration:
    repository:
      existingConfigMap: repository
    db:
      existingConfigMap:
        name: *infrastructure_cmName
      existingSecret:
        name: *acs_database_secretName
    messageBroker:
      existingConfigMap:
        name: *infrastructure_cmName
      existingSecret:
        name: *acs_database_secretName
    search:
      flavor: solr6
      existingConfigMap:
        name: *infrastructure_cmName
      existingSecret:
        name: solr-shared-secret
repository:
  # -- Administrator password for ACS in NTLM hash format to set at bootstrap time
  adminPassword: "209c6174da490caeb422f3fa5a7ae634"
  # -- The name of the secret holding the ACS repository license if any.
  # it must be contained within a `data['*.lic']` property
  # For details on how to manage license, see:
  # https://github.com/Alfresco/acs-deployment/blob/master/docs/helm/examples/alf_license.md
  licenseSecret: null
  edition: Enterprise
  replicaCount: 2
  service:
    externalPort: 80
  strategy:
    type: Recreate
  persistence:
    # -- Persist repository data
    enabled: true
    baseSize: 20Gi
    # -- Specify a storageClass for dynamic provisioning
    accessModes:
      - ReadWriteMany
  # -- Provide additional log statements by adding classes and/or packages in a
  # key:value maner org.alfresco.repo.content.transform.TransformerDebug: debug
  extraLogStatements: {}
  # -- An existing secret that contains REPO_ADMIN_PASSWORD as an alternative for `repository.adminPassword` value
  existingSecretName: null
# -- Declares the api-explorer service used by the content repository
apiexplorer:
  ingress:
    path: /api-explorer
activemq:
  nameOverride: activemq
  enabled: true
  # -- Possibility to choose Node for pod, with a key-value pair label
  # e.g {"kubernetes.io/hostname": multinode-demo-m02}
  nodeSelector: {}
  adminUser:
    # -- Default username for the embedded broker admin user
    user: admin
    # -- Default password for the embedded broker admin user
    password: admin
    existingSecretName: *acs_messageBroker_secretName
  existingSecretName: null
alfresco-connector-ms365:
  # -- Enable/Disable Alfresco Content Connector for Microsoft 365
  enabled: false
  image:
    repository: quay.io/alfresco/alfresco-ooi-service
    tag: 2.0.0
  repository:
    existingConfigMap:
      # -- Name of the configmap which hold the repositoy connection details
      name: infrastructure-repository
      keys:
        # -- Name of the key in the configmap which points to the repository
        # service hostname
        host: repo_svc_name
        # -- Name of the key in the configmap which points to the repository
        # service port
        port: repo_svc_port
alfresco-connector-msteams:
  # -- Enable/Disable Alfresco Content Connector for Microsoft Teams
  enabled: false
  image:
    repository: quay.io/alfresco/alfresco-ms-teams-service
    tag: 2.0.0
alfresco-transform-service:
  enabled: true
  messageBroker:
    existingSecretName: *acs_messageBroker_secretName
  transformrouter:
    # -- Declares the alfresco-transform-router service used by the content repository
    # to route transformation requests
    enabled: true
    replicaCount: 2
    image:
      repository: quay.io/alfresco/alfresco-transform-router
      tag: 3.0.1-A3
  pdfrenderer:
    # -- Declares the alfresco-pdf-renderer service used by the content repository
    # to transform pdf files
    enabled: true
    image:
      repository: alfresco/alfresco-pdf-renderer
      tag: 4.0.1-A3
  imagemagick:
    # -- Declares the alfresco-imagemagick service used by the content repository
    # to transform image files
    enabled: true
    image:
      repository: alfresco/alfresco-imagemagick
      tag: 4.0.1-A3
  libreoffice:
    # -- Declares the alfresco-libreoffice service used by the content repository
    # to transform office files
    enabled: true
    image:
      repository: alfresco/alfresco-libreoffice
      tag: 4.0.1-A3
  tika:
    # -- Declares the alfresco-tika service used by the content repository
    # to transform office files
    enabled: true
    image:
      repository: alfresco/alfresco-tika
      tag: 4.0.1-A3
  transformmisc:
    # -- Declares the alfresco-tika service used by the content repository
    # to transform office files
    enabled: true
    image:
      repository: alfresco/alfresco-transform-misc
      tag: 4.0.1-A3
  filestore:
    # -- Declares the alfresco-shared-file-store used by the content repository
    # and transform service
    enabled: true
    replicaCount: 1
    image:
      repository: quay.io/alfresco/alfresco-shared-file-store
      tag: 3.0.1-A3
    persistence:
      # -- Persist filestore data
      enabled: true
      data:
        mountPath: "/tmp/Alfresco"
        subPath: "alfresco-content-services/filestore-data"
share:
  # -- toggle deploying Alfresco Share UI
  enabled: true
  image:
    repository: quay.io/alfresco/alfresco-share
    tag: 23.1.0-A27
  nameOverride: share
  repository:
    existingConfigMap:
      # -- Name of the configmap which hold the repositoy connection details
      name: *infrastructure_cmName
      keys:
        # -- Name of the key in the configmap which points to the repository
        # service hostname
        host: repo_svc_name
        # -- Name of the key in the configmap which points to the repository
        # service port
        port: repo_svc_port
alfresco-search:
  enabled: true
  repository:
    existingConfigMap:
      name: *infrastructure_cmName
      keys:
        host: repo_svc_name
        port: repo_svc_port
        securecomms: SEARCH_SECURECOMMS
  searchServicesImage:
    repository: quay.io/alfresco/search-services
    tag: 2.0.8
  nameOverride: alfresco-search
  # If an external Solr service is to be used then enabled must be set to false
  # and external has to be configured accordingly.
  external:
    # -- Host dns/ip of the external solr6 instance.
    host: null
    # -- Port of the external solr6 instance.
    port: null
  alfresco-insight-zeppelin:
    enabled: false
  ingress:
    # -- Alfresco Search services endpoint ('/solr')
    enabled: false
    # -- Default solr basic auth user/password: admin / admin
    # You can create your own with htpasswd utilility & encode it with base64.
    # Example: `echo -n "$(htpasswd -nbm admin admin)" | base64 | tr -d '\n'`
    # basicAuth: YWRtaW46JGFwcjEkVVJqb29uS00kSEMuS1EwVkRScFpwSHB2a3JwTDd1Lg==
    basicAuth: null
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
alfresco-search-enterprise:
  enabled: false
  elasticsearch:
    # -- Enables the embedded elasticsearch cluster
    enabled: true
  messageBroker:
    existingSecretName: *acs_messageBroker_secretName
  liveIndexing:
    mediation:
      image:
        tag: 3.4.0-M1
    content:
      image:
        tag: 3.4.0-M1
    metadata:
      image:
        tag: 3.4.0-M1
    path:
      image:
        tag: 3.4.0-M1
  reindexing:
    enabled: true
    postgresql:
      url: null
      hostname: postgresql-acs
      database: alfresco
      existingSecretName: *acs_database_secretName
    image:
      tag: 3.4.0-M1
alfresco-digital-workspace:
  nodeSelector: {}
  enabled: true
  nameOverride: "alfresco-dw"
  service:
    envType: frontend
  ingress:
    path: /workspace
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-body-size: "5g"
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  image:
    repository: quay.io/alfresco/alfresco-digital-workspace
    tag: 4.1.0-5529585677
    pullPolicy: IfNotPresent
  env:
    APP_CONFIG_PROVIDER: "ECM"
    APP_CONFIG_AUTH_TYPE: "BASIC"
    API_URL: "{protocol}//{hostname}{:port}"
  extraEnv: |-
    {{- if .Values.global.ai.enabled }}
    - name: APP_CONFIG_PLUGIN_AI_SERVICE
      value: '{{ .Values.global.ai.enabled }}'
    {{- end }}
  securityContext:
    runAsNonRoot: true
    runAsUser: 101
    capabilities:
      drop:
        - NET_RAW
        - ALL
  resources:
    requests:
      cpu: "0.25"
      memory: "256Mi"
    limits:
      cpu: "1"
      memory: "1024Mi"
alfresco-control-center:
  nodeSelector: {}
  enabled: true
  nameOverride: "alfresco-cc"
  service:
    envType: frontend
  ingress:
    path: /control-center
    annotations:
      kubernetes.io/ingress.class: nginx
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  image:
    repository: quay.io/alfresco/alfresco-control-center
    tag: 8.1.0-5529585677
    pullPolicy: IfNotPresent
  env:
    APP_CONFIG_PROVIDER: "ECM"
    APP_CONFIG_AUTH_TYPE: "BASIC"
    API_URL: "{protocol}//{hostname}{:port}"
  securityContext:
    runAsNonRoot: true
    runAsUser: 101
    capabilities:
      drop:
        - NET_RAW
        - ALL
  resources:
    requests:
      cpu: "0.25"
      memory: "256Mi"
    limits:
      cpu: "1"
      memory: "1024Mi"
postgresql:
  # -- Toggle embedded postgres for Alfresco Content Services repository
  # Check [PostgreSQL Bitnami chart
  # Documentation](https://github.com/bitnami/charts/tree/main/bitnami/postgresql)
  enabled: true
  nameOverride: postgresql-acs
  image:
    tag: 14.4.0
    pullPolicy: IfNotPresent
  commonAnnotations:
    application: alfresco-content-services
  auth:
    existingSecret: null
    username: alfresco
    password: alfresco
    database: alfresco
  primary:
    extendedConfiguration: |
      max_connections = 250
      shared_buffers = 512MB
      effective_cache_size = 2GB
      wal_level = minimal
      max_wal_senders = 0
      max_replication_slots = 0
      log_min_messages = LOG
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "8"
        memory: "8Gi"
    persistence:
      # -- set the storageClass to use for dynamic provisioning.
      # setting it to null means "default storageClass".
      storageClass: null
      # -- provide an existing persistent volume claim name to persist SQL data
      # Make sure the root folder has the appropriate permissions/ownhership set.
      existingClaim: null
      subPath: "alfresco-content-services/database-data"
s3connector:
  # -- Enable the S3 Connector
  # For a full list of properties on the S3 connector see:
  # https://docs.alfresco.com/s3connector/references/s3-contentstore-ref-config-props.html
  enabled: false
  config:
    bucketName: null
    bucketLocation: null
  secrets:
    accessKey: null
    secretKey: null
    encryption: null
    awsKmsKeyId: null
  # -- An existing kubernetes secret that contains ACCESSKEY, SECRETKEY, ENCRYPTION, KMSKEYID keys
  existingSecretName: null
# -- For a full information of configuring the inbound email system, see
# https://docs.alfresco.com/content-services/latest/config/email/#manage-inbound-emails
email:
  server:
    enabled: false
    port: 1125
    domain: null
    enableTLS: true
    hideTLS: false
    requireTLS: false
    auth:
      enabled: true
    connections:
      max: 3
    allowed:
      senders: .*
    blocked:
      senders: null
  inbound:
    enabled: false
    unknownUser: anonymous
    emailContributorsAuthority: EMAIL_CONTRIBUTORS
  handler:
    folder:
      overwriteDuplicates: true
  ssl:
    secretName: null
  initContainers:
    pemToKeystore:
      image:
        repository: registry.access.redhat.com/redhat-sso-7/sso71-openshift
        tag: 1.1-16
        pullPolicy: IfNotPresent
    pemToTruststore:
      image:
        repository: registry.access.redhat.com/redhat-sso-7/sso71-openshift
        tag: 1.1-16
        pullPolicy: IfNotPresent
    setPerms:
      image:
        repository: busybox
        tag: 1.35.0
        pullPolicy: IfNotPresent
# -- For a full information of configuring the outbound email system, see
# https://docs.alfresco.com/content-services/latest/config/email/#manage-outbound-emails
mail:
  # -- SMTP(S) host server to enable delivery of site invitations, activity notifications and workflow tasks by email
  host: null
  port: 25
  protocol: smtps
  encoding: UTF-8
  username: null
  password: null
  # -- An existing kubernetes secret that contains MAIL_PASSWORD as per `mail.password` value
  existingSecretName: null
  from:
    # -- Specifies the email address from which email notifications are sent
    default: null
    enabled: false
  smtp:
    auth: true
    debug: false
    timeout: 30000
    starttls:
      enable: true
  smtps:
    auth: true
    starttls:
      enable: true
# -- For a full information of configuring the imap subsystem, see
# https://docs.alfresco.com/content-services/latest/config/email/#enable-imap-protocol-using-alfresco-globalproperties
imap:
  server:
    enabled: false
    host: "0.0.0.0"
    port: 1143
    imap:
      enabled: true
    imaps:
      enabled: true
      port: 1144
  mail:
    from:
      default: null
    to:
      default: null
metadataKeystore:
  # keystorePassword: ""
  # keyPassword: ""
  defaultKeystorePassword: "mp6yc0UD9e"
  defaultKeyPassword: "oKIWzVdEdA"
alfresco-sync-service:
  # -- Toggle deployment of Alfresco Sync Service (Desktop-Sync)
  # Check [Alfresco Sync Service
  # Documentation](https://github.com/Alfresco/alfresco-helm-charts/tree/main/charts/alfresco-sync-service)
  enabled: true
  image:
    tag: 4.0.0-M10
  postgresql:
    enabled: true
    image:
      tag: 14.4.0
    auth:
      enablePostgresUser: false
      username: alfresco
      password: admin
      database: syncservice-postgresql
    primary:
      resources:
        requests:
          cpu: 250m
          memory: 1Gi
        limits:
          cpu: "4"
          memory: 4Gi
  messageBroker:
    existingSecretName: *acs_messageBroker_secretName
  repository:
    nameOverride: alfresco-cs-repository
    port: 80
  # -- toggle deploying Alfresco ai transformer
alfresco-ai-transformer:
  enabled: false
  messageBroker:
    existingSecretName: *acs_messageBroker_secretName
  image:
    repository: quay.io/alfresco/alfresco-ai-docker-engine
    tag: 2.0.1-A4
#  aws:
#    accessKey:
#    secretAccessKey:
#    region:
#    s3Bucket:
#    comprehendRoleARN:
global:
  known_urls:
    - https://localhost
    - http://localhost
  # A shared secret is now required in order to authenticate connections between
  # solr and repo (typically: tracking)
  tracking:
    # -- Select how solr and repo authenticate to each other
    # none: work only prior to acs 7.2 (and was the default)
    # secret: use a shared secret (to specify using `tracking.sharedsecret`)
    # https: to use mTLS auth (require appropriate certificate configuration)
    auth: secret
    # -- Shared secret to authenticate repo/solr traffic.
    # Strong enough secret can be generated with `openssl rand 20 -base64`
    sharedsecret: null
  # -- If a private image registry a secret can be defined and passed to
  # kubernetes, see:
  # https://github.com/Alfresco/acs-deployment/blob/a924ad6670911f64f1bba680682d266dd4ea27fb/docs/helm/eks-deployment.md#docker-registry-secret
  alfrescoRegistryPullSecrets: null
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  registryPullSecrets:
    - quay-registry-secret
  ai:
    # -- Enable AI capabilities in ADW AI plugin
    enabled: false
  # -- Shared connections details for Elasticsearch/Opensearch, required when
  # alfresco-search-enterprise.enabled is true
  elasticsearch:
    # -- The host where service is available. The provided default is for when
    # elasticsearch.enabled is true
    host: elasticsearch-master
    # -- The port where service is available
    port: 9200
    # -- Valid values are http or https
    protocol: http
    # -- The username required to access the service, if any
    user: null
    # -- The password required to access the service, if any
    password: null
