# Defines the deployment for the alfresco content repository app
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "content-services.shortname" . }}-repository
  labels:
    app: {{ template "content-services.shortname" . }}-repository
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: repository
spec:
  replicas: {{ .Values.repository.replicaCount }}
  strategy:
    {{- if eq .Values.repository.strategy.type "Recreate" }}
    type: {{ .Values.repository.strategy.type }}
    rollingUpdate: null
    {{- else }}
    type: RollingUpdate
    rollingUpdate:
{{ toYaml .Values.global.strategy.rollingUpdate | indent 6 }}
    {{- end }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config-repository.yaml") . | sha256sum }}
        checksum/secretDatabase: {{ include (print $.Template.BasePath "/secret-database.yaml") . | sha256sum }}
        checksum/secretS3: {{ include (print $.Template.BasePath "/secret-s3.yaml") . | sha256sum }}
      labels:
        app: {{ template "content-services.shortname" . }}-repository
        release: {{ .Release.Name }}
        component: repository
    spec:
      {{- if .Values.global.alfrescoRegistryPullSecrets }}
      # only set this secret if a private docker registry variable is defined
      imagePullSecrets:
        - name: {{ .Values.global.alfrescoRegistryPullSecrets }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.repository.image.repository }}:{{ .Values.repository.image.tag }}"
          imagePullPolicy: {{ .Values.repository.image.pullPolicy }}
          envFrom:
          - secretRef:
              name: {{ template "content-services.shortname" . }}-dbsecret
          {{- if .Values.s3connector.enabled }}
          - secretRef:
              # s3 connector secret keys
              name: {{ template "content-services.shortname" . }}-s3secret
          {{- end }}
          {{- if .Values.email.server.enabled }}
          - secretRef:
              # mail password
              name: {{ template "content-services.shortname" . }}-mail-password
          {{- end }}
          - configMapRef:
              # config map to use, defined in config-repository.yaml
              name: {{ template "content-services.shortname" . }}-repository-configmap
          ports:
            # internal port and the hazelcast port used for clustering
            - containerPort: {{ .Values.repository.image.internalPort }}
            - containerPort: {{ .Values.repository.image.hazelcastPort }}
            {{- if .Values.email.server.enabled }}
            - containerPort: {{ .Values.email.server.port }}
            - containerPort: {{ .Values.imap.server.port }}
            - containerPort: {{ .Values.imap.server.imaps.port }}
            {{- end }}
          resources:
{{ toYaml .Values.repository.resources | indent 12 }}
          {{- if .Values.persistence.repository.enabled }}
          volumeMounts:
          - name: data
            mountPath: {{ .Values.persistence.repository.data.mountPath }}
            subPath: {{ .Values.persistence.repository.data.subPath }}
          - name: custom-pipeline-config-volume
            mountPath: {{ .Values.persistence.repository.config.transform.pipelinesMountPath }}
          - name: custom-rendition-config-volume
            mountPath: {{ .Values.persistence.repository.config.transform.renditionsMountPath }}
          - name: custom-mimetype-config-volume
            mountPath: {{ .Values.persistence.repository.config.transform.mimetypesMountPath }}
          {{- if and .Values.email.server.enabled .Values.email.server.enableTLS }}
          - mountPath: /var/run/secrets/java.io/keystores
            name: email-keystore-volume
          - mountPath: /var/run/secrets/certs
            name: email-certs
          {{- end }}
          {{- end }}
          readinessProbe:
            httpGet:
              path: /alfresco/api/-default-/public/alfresco/versions/1/probes/-ready-
              port: {{ .Values.repository.image.internalPort }}
            initialDelaySeconds: {{ .Values.repository.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.repository.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.repository.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.repository.readinessProbe.timeoutSeconds }}
          livenessProbe:
            httpGet:
              path: /alfresco/api/-default-/public/alfresco/versions/1/probes/-live-
              port: {{ .Values.repository.image.internalPort }}
            initialDelaySeconds: {{ .Values.repository.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.repository.livenessProbe.periodSeconds }}
            failureThreshold: 1
            timeoutSeconds: {{ .Values.repository.livenessProbe.timeoutSeconds }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "sleep 20"]            
      {{- if or (eq .Values.database.external false) (.Values.persistence.repository.enabled) }}
      initContainers:
      {{- if eq .Values.database.external false }}
        # wait for the DB to startup before this deployment can start
        - name: init-db
          image: busybox
          command: ['sh', '-c', 'until nc -w1 {{ printf "%s-%s" .Release.Name .Values.postgresql.nameOverride }} {{ .Values.postgresql.service.port }}; do echo "waiting for {{ printf "%s-%s" .Release.Name .Values.postgresql.nameOverride }}"; sleep 2; done;']
      {{- end }}
      {{- if .Values.persistence.repository.enabled }}
        - name: init-fs
          image: busybox
          # command to allow repository to write to EFS volume.
          command: ["sh", "-c", "chown -R 33000:1000 {{ .Values.persistence.repository.data.mountPath }}"]
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.repository.data.mountPath }}
              subPath: {{ .Values.persistence.repository.data.subPath }}
        {{- if and .Values.email.server.enabled .Values.email.server.enableTLS }}
        - name: pem-to-keystore
          image: registry.access.redhat.com/redhat-sso-7/sso71-openshift:1.1-16
          env:
            - name: keyfile
              value: /var/run/secrets/certs/tls.key
            - name: crtfile
              value: /var/run/secrets/certs/tls.crt
            - name: keystore_pkcs12
              value: /var/run/secrets/java.io/keystores/keystore.pkcs12
            - name: keystore_jks
              value: /var/run/secrets/java.io/keystores/keystore.jks
            - name: password
              value: changeit
          command: ['/bin/bash']
          args: ['-c', "openssl pkcs12 -export -inkey $keyfile -in $crtfile -out $keystore_pkcs12 -password pass:$password && keytool -importkeystore -noprompt -srckeystore $keystore_pkcs12 -srcstoretype pkcs12 -destkeystore $keystore_jks -storepass $password -srcstorepass $password"]
          volumeMounts:
            - mountPath: /var/run/secrets/java.io/keystores
              name: email-keystore-volume
            - mountPath: /var/run/secrets/certs
              name: email-certs
        - name: pem-to-truststore
          image: registry.access.redhat.com/redhat-sso-7/sso71-openshift:1.1-16
          env:
            - name: ca_bundle
              value: /var/run/secrets/cacert/ca.crt
            - name: truststore_jks
              value: /var/run/secrets/java.io/keystores/truststore.jks
            - name: password
              value: changeit
          command: ['/bin/bash']
          args: ['-c', "csplit -z -f crt- $ca_bundle '/-----BEGIN CERTIFICATE-----/' '{*}' && for file in crt-*; do keytool -import -noprompt -keystore $truststore_jks -file $file -storepass changeit -alias service-$file; done"]
          volumeMounts:
            - name: email-keystore-volume
              mountPath: /var/run/secrets/java.io/keystores
            - name: ca-cert
              mountPath: /var/run/secrets/cacert
        - name: set-perms
          image: busybox
          env:
            - name: keystore_dir
              value: /var/run/secrets/java.io/keystores
          command: ["sh", "-c", "chown -R 33000:1000 $keystore_dir"]
          volumeMounts:
            - name: email-keystore-volume
              mountPath: /var/run/secrets/java.io/keystores
        {{- end }}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim }}
      - name: custom-pipeline-config-volume
        configMap:
          optional: true
          name: custom-pipeline-config
      - name: custom-rendition-config-volume
        configMap:
          optional: true
          name: custom-rendition-config
      - name: custom-mimetype-config-volume
        configMap:
          optional: true
          name: custom-mimetype-config
      {{- if and .Values.email.server.enabled .Values.email.server.enableTLS }}
      - name: email-keystore-volume
        emptyDir: {}
      - name: email-certs
        secret:
          secretName: {{ .Values.email.ssl.secretName }}
      - name: ca-cert
        secret:
          secretName: {{ .Values.email.ssl.secretName }}
          items:
            - key: ca.crt
              path: ca.crt
      {{- end }}
      {{- end }}
      {{- end }}
