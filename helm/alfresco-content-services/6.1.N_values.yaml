# This is a YAML-formatted file.  Declare variables to be passed into your templates.

# ACS will be created in a k8s cluster with a minimum of 16GB memory to split among below nodes:
# 2 x repository, 1 x share, 1 x transformers (pdfrenderer, imagemagick, libreoffice, tika, misc) and 1 x postgresql

# Limit container memory and assign X percentage to JVM.  There are couple of ways to allocate JVM Memory for ACS Containers
# For example: 'JAVA_OPTS: "$JAVA_OPTS -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"'
# But, as per Oracle docs (https://docs.oracle.com/javase/9/gctuning/parallel-collector1.htm#JSGCT-GUID-CAB83393-3438-44ED-98F0-D15641B43C7D)
# If container memory is not explicitly set, then the above flags will default max heap to 1/4th of container's memory which may not be ideal.
# Hence, setting up explicit Container memory and then assigning a percentage of it to the JVM for performance tuning.

repository:
  edition: Enterprise
  replicaCount: 2
  strategy:
    type: Recreate
  image:
    repository: alfresco/alfresco-content-repository
    tag: "6.1.1"
    pullPolicy: Always
    internalPort: 8080
    hazelcastPort: 5701
  initContainers:
    db:
      image:
        repository: busybox
        tag: 1
        pullPolicy: Always
      resources:
        requests:
          memory: "5Mi"
        limits:
          memory: "10Mi"
    fs:
      image:
        repository: busybox
        tag: 1
        pullPolicy: Always
      resources:
        requests:
          memory: "5Mi"
        limits:
          memory: "10Mi"
  service:
    name: alfresco
    type: ClusterIP
    externalPort: &repositoryExternalPort 80
  ingress:
    path: /
    maxUploadSize: "5g"
    annotations: {}
      # nginx.ingress.kubernetes.io/enable-cors: "true"
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  environment:
    JAVA_OPTS: " -Dsolr.base.url=/solr
      -Dsolr.secureComms=none
      -Dindex.subsystem.name=solr6
      -Dalfresco.cluster.enabled=true
      -Ddeployment.method=HELM_CHART
      -Dtransform.service.enabled=true
      -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
    JAVA_TOOL_OPTIONS: " -Dmetadata-keystore.aliases=metadata -Dmetadata-keystore.metadata.algorithm=AES"
  resources:
    requests:
      memory: "3000Mi"
    limits:
      memory: "3000Mi"
  # The repository readiness probe is used to check startup only as a failure
  # of the liveness probe later will result in the pod being restarted.
  readinessProbe:
    initialDelaySeconds: 60
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
  livenessProbe:
    initialDelaySeconds: 130
    periodSeconds: 20
    timeoutSeconds: 10
  # Provide additional log statements by adding
  # classes and/or packages in a key:value fashion
  # extraLogStatements:
  #   org.alfresco.repo.content.transform.TransformerDebug: debug
  #   org.alfresco.repo.security.authentication.identityservice: debug

# Declares the api-explorer service used by the content repository
apiexplorer:
  ingress:
    path: /api-explorer

transformrouter:
  replicaCount: 2
  image:
    repository: quay.io/alfresco/alfresco-transform-router
    tag: "1.0.2"
    pullPolicy: Always
    internalPort: 8095
  service:
    name: transform-router
    type: ClusterIP
    externalPort: 80
  environment:
    JAVA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
  readinessProbe:
    initialDelaySeconds: 140
    periodSeconds: 60
    timeoutSeconds: 10
  livenessProbe:
    initialDelaySeconds: 140
    periodSeconds: 120
    timeoutSeconds: 60
  resources:
    requests:
      memory: "128Mi"
    limits:
      memory: "512Mi"

# Declares the alfresco-pdf-renderer service used by the content repository
# to transform pdf files
pdfrenderer:
  replicaCount: 2
  image:
    repository: quay.io/alfresco/alfresco-pdf-renderer
    tag: "2.0.17"
    pullPolicy: Always
    internalPort: 8090
  service:
    name: pdfrenderer
    type: ClusterIP
    externalPort: 80
  resources:
    requests:
      memory: "1000Mi"
    limits:
      memory: "1000Mi"
  environment:
    JAVA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
  readinessProbe:
    initialDelaySeconds: 20
    periodSeconds: 60
    timeoutSeconds: 10
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 20
    timeoutSeconds: 10
    livenessPercent: 150
    livenessTransformPeriodSeconds: 600
    maxTransforms: 10000
    maxTransformSeconds: 1200

# Declares the alfresco-imagemagick service used by the content repository
# to transform image files
imagemagick:
  replicaCount: 2
  image:
    repository: quay.io/alfresco/alfresco-imagemagick
    tag: "2.0.17"
    pullPolicy: Always
    internalPort: 8090
  service:
    name: imagemagick
    type: ClusterIP
    externalPort: 80
  resources:
    requests:
      memory: "1000Mi"
    limits:
      memory: "1000Mi"
  environment:
    JAVA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
  readinessProbe:
    initialDelaySeconds: 20
    periodSeconds: 60
    timeoutSeconds: 10
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 20
    timeoutSeconds: 10
    livenessPercent: 150
    livenessTransformPeriodSeconds: 600
    maxTransforms: 10000
    maxTransformSeconds: 900

# Declares the alfresco-libreoffice service used by the content repository
# to transform office files
libreoffice:
  replicaCount: 2
  image:
    repository: quay.io/alfresco/alfresco-libreoffice
    tag: "2.0.17"
    pullPolicy: Always
    internalPort: 8090
  service:
    name: libreoffice
    type: ClusterIP
    externalPort: 80
  resources:
    requests:
      memory: "1000Mi"
    limits:
      memory: "1000Mi"
  environment:
    JAVA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
  readinessProbe:
    initialDelaySeconds: 20
    periodSeconds: 60
    timeoutSeconds: 10
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 20
    timeoutSeconds: 10
    livenessPercent: 250
    livenessTransformPeriodSeconds: 600
    maxTransforms: 99999
    maxTransformSeconds: 1800

# Declares the alfresco-tika service used by the content repository
# to transform office files
tika:
  replicaCount: 2
  image:
    repository: quay.io/alfresco/alfresco-tika
    tag: "2.0.17"
    pullPolicy: Always
    internalPort: 8090
  service:
    name: tika
    type: ClusterIP
    externalPort: 80
  resources:
    requests:
      memory: "1000Mi"
    limits:
      memory: "1000Mi"
  environment:
    JAVA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
  readinessProbe:
    initialDelaySeconds: 20
    periodSeconds: 60
    timeoutSeconds: 10
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 20
    timeoutSeconds: 10
    livenessPercent: 400
    livenessTransformPeriodSeconds: 600
    maxTransforms: 10000
    maxTransformSeconds: 1800

transformmisc:
  enabled: false

aiTransformer:
  replicaCount: 2
  image:
    repository: quay.io/alfresco/alfresco-ai-docker-engine
    tag: "1.0.2"
    pullPolicy: Always
    internalPort: 8090
  service:
    name: ai-transformer
    type: ClusterIP
    externalPort: 80
  resources:
    requests:
      memory: "1000Mi"
    limits:
      memory: "1000Mi"
  environment:
    JAVA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
  readinessProbe:
    initialDelaySeconds: 20
    periodSeconds: 60
    timeoutSeconds: 10
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 20
    timeoutSeconds: 10
    livenessPercent: 400
    livenessTransformPeriodSeconds: 600
    maxTransforms: 10000
    maxTransformSeconds: 1800

# Declares the alfresco-shared-file-store used by the content repository
# and transform service
filestore:
  replicaCount: 1
  image:
    repository: alfresco/alfresco-shared-file-store
    tag: "0.5.3"
    pullPolicy: Always
    internalPort: 8099
  initContainer:
    image:
      repository: busybox
      tag: 1
      pullPolicy: Always
    resources:
      requests:
        memory: "5Mi"
      limits:
        memory: "10Mi"
  service:
    name: filestore
    type: ClusterIP
    externalPort: 80
  resources:
    requests:
      memory: "1000Mi"
    limits:
      memory: "1000Mi"
  environment:
    scheduler.content.age.millis: "86400000"
    scheduler.cleanup.interval: "86400000"
    JAVA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
  readinessProbe:
    initialDelaySeconds: 20
    periodSeconds: 60
    timeoutSeconds: 10
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 20
    timeoutSeconds: 10
    livenessPercent: 150
    livenessSavePeriodSeconds: 600

# Define the alfresco-share properties to use in the k8s cluster
# This is the default presentation layer(UI) of Alfresco Content Services
share:
  replicaCount: 1
  image:
    repository: alfresco/alfresco-share
    tag: "6.1.1"
    pullPolicy: Always
    internalPort: 8080
  service:
    name: share
    type: ClusterIP
    externalPort: 80
  ingress:
    path: /share
    annotations: {}
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    requests:
      memory: "2000Mi"
    limits:
      memory: "2000Mi"
  environment:
    CATALINA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
  readinessProbe:
    initialDelaySeconds: 60
    periodSeconds: 20
    timeoutSeconds: 10
  livenessProbe:
    initialDelaySeconds: 130
    periodSeconds: 20
    timeoutSeconds: 10

# Defines the mounting points for the persistence required by the apps in the
# cluster the alf_data folder from alfresco-content-repository app is mapped to
# alfresco-content-services/repository-data
persistence:
  enabled: true
  baseSize: 20Gi
  storageClass: #enable and define if you already have a custom storage class defined
    enabled: false
    accessModes:
      - ReadWriteMany
    name: "nfs" #Custom storage classs name
  existingClaim: "alfresco-volume-claim"
  repository:
    enabled: true
    config:
      querysetsMountPath: "/usr/local/tomcat/shared/classes/alfresco/extension/querysets/"
      transform:
        renditionsMountPath: "/usr/local/tomcat/shared/classes/alfresco/extension/transform/renditions/"
        pipelinesMountPath: "/usr/local/tomcat/shared/classes/alfresco/extension/transform/pipelines/"
        mimetypesMountPath: "/usr/local/tomcat/shared/classes/alfresco/extension/mimetypes/"
    data:
      mountPath: "/usr/local/tomcat/alf_data"
      subPath: "alfresco-content-services/repository-data"
  filestore:
    enabled: true
    data:
      mountPath: "/tmp/Alfresco"
      subPath: "alfresco-content-services/filestore-data"

activemq:
    enabled: true

alfresco-search:
  type: "search-services"
  enabled: true
# If enabled is set to false, then external host and port need to point to the external instance of SOLR6, and in this case:
# Note: Rule_05-network-policy-search will be disabled.
# Note: Rule_04-network-policy-repository internal trafic to SOLR6 instance will be disabled.
# Note: ingress-repository will not block external trafic to */solr/*
#  external:
    # Host dns/ip of the external solr6 instance.
#    host: "127.0.0.1"
    # Port of the external solr6 instance.
#    port: "8983"
  searchServicesImage:
    tag: "1.4.3"
  repository: &repositoryHostPort
    # The value for "host" is the name of this chart
    host: alfresco-cs
    port: *repositoryExternalPort
  alfresco-insight-zeppelin:
    insightzeppelin:
      enabled: false
    repository: *repositoryHostPort
  ingress:
    # Alfresco Search services endpoint ('/solr') is disabled by default
    # To enable it please see: acs-deployment configuration table](https://github.com/Alfresco/acs-deployment/tree/master/helm/alfresco-content-services#configuration)
    enabled: false
  # Default solr basic auth user/password: admin / admin
  # You can create your own with htpasswd utilility & encode it with base640.
  # Example: `echo -n "$(htpasswd -nbm admin admin)" | base64` # i.e. admin / admin
  # basicAuth: YWRtaW46JGFwcjEkVVJqb29uS00kSEMuS1EwVkRScFpwSHB2a3JwTDd1Lg==
    basicAuth:
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

alfresco-digital-workspace:
  enabled: true
  nameOverride: "alfresco-dw"
  service:
    envType: frontend
  ingress:
    path: /workspace
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "5g"
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  image:
    repository: quay.io/alfresco/alfresco-digital-workspace
    tag: 1.4.0
    pullPolicy: Always
  env:
    APP_CONFIG_AUTH_TYPE: "BASIC"
    API_URL: "{protocol}//{hostname}{:port}"

# choose if you want AI capabilities
ai:
  enabled: false
  # aws:
  #  accessKey:
  #  secretAccessKey:
  #  region:
  #  s3Bucket:
  #  comprehendRoleARN:


# Defines properties required by alfresco for connecting to the database
# Note! : If you set database.external to true you will have to setup the driver, user, password and JdbcUrl
# Also make sure that the container has the db driver in /usr/local/tomcat/lib since the current image only has the postgresql driver
database:
  external: false
  # driver:     #ex: org.postgresql.Driver
  # user:     #ex: alfresco
  # password:     #ex: alfresco
  # url:    # ex: jdbc:postgresql://oldfashioned-mule-postgresql-acs:5432/alfresco

# Defines the properties to be used for the required postgres DB
# Note: the database (tables) information is also saved in the persistent volume claim
postgresql:
  replicaCount: 1
  ## If true, install the postgresql chart alongside Alfresco Content Services.
  # Note: Set this to false if you use an external database.
  enabled: true
  nameOverride: postgresql-acs
  imageTag: "11.4.0"
  image:
    pullPolicy: Always
  postgresqlUsername: alfresco
  postgresqlPassword: alfresco
  postgresqlDatabase: alfresco
  postgresqlExtendedConf:
    max_connections: 300
    log_min_messages: LOG
  persistence:
    existingClaim: "alfresco-volume-claim"
    subPath: "alfresco-content-services/database-data"
  resources:
    requests:
      memory: "1500Mi"
    limits:
      memory: "1500Mi"

postgresql-syncservice:
  ## If true, install the postgresql chart alongside Alfresco Sync service.
  # Note: Set this to false if you use an external database.
  name: postgresql-syncservice
  enabled: true
  replicaCount: 1
  nameOverride: postgresql-syncservice
  imageTag: "11.4.0"
  image:
    pullPolicy: Always
  persistence:
    existingClaim: "alfresco-volume-claim"
    subPath: "alfresco-sync-services/database-data"
    #subPath: "ent-featureappsrepo470-9/alfresco-sync-services/database-data"
  postgresqlUsername: alfresco
  postgresqlPassword: admin
  postgresqlDatabase: syncservice-postgresql
  postgresqlExtendedConf:
    max_connections: 450
    log_min_messages: LOG
  service:
    port: 5432
  resources:
    requests:
      memory: "1500Mi"
    limits:
      memory: "1500Mi"

# Defines the properties to be used for the S3 Connector
s3connector:
  enabled: false
  # config:
  #   bucketName:
  #   bucketLocation:
  ##   Additional properties can be defined here.
  ##   For a full list of properties on the S3 connector, please view: https://docs.alfresco.com/s3connector/references/s3-contentstore-ref-config-props.html
  # secrets:
  #   accessKey:
  #   secretKey:
  #   encryption:
  #   awsKmsKeyId:

##  For a full information of properties on the email configuration, please view: https://docs.alfresco.com/6.2/concepts/email.html
email:
  server:
    enabled: false
    port: 1125
    domain:
    enableTLS: true
    hideTLS: false
    requireTLS: false
    auth:
      enabled: true
    connections:
      max: 3
    allowed:
      senders: .*
    blocked:
      senders:
  inbound:
    enabled: false
    unknownUser: anonymous
    emailContributorsAuthority: EMAIL_CONTRIBUTORS
  handler:
    folder:
      overwriteDuplicates: true
  ssl:
    secretName:
  initContainers:
    pemToKeystore:
      image:
        repository: registry.access.redhat.com/redhat-sso-7/sso71-openshift
        tag: 1.1-16
        pullPolicy: Always
    pemToTruststore:
      image:
        repository: registry.access.redhat.com/redhat-sso-7/sso71-openshift
        tag: 1.1-16
        pullPolicy: Always
    setPerms:
      image:
        repository: busybox
        tag: 1
        pullPolicy: Always

mail:
  host:
  port:
  protocol: smtps
  encoding: UTF-8
  username:
  password:
  from:
    default:
    enabled: false
  smtp:
    auth: true
    debug: false
    timeout: 30000
    starttls:
      enable: true
  smtps:
    auth: true
    starttls:
      enable: true
  # DO NOT USE: It breaks repo pod with Error: Could not find or load main class SMTP Caused by: java.lang.ClassNotFoundException: SMTP
  # testmessage:
  #   send: false
  #   subject: "Outbound SMTP"
  #   text: "The Outbound SMTP email subsystem is working."
  #   to:

imap:
  server:
    enabled: false
    host: "0.0.0.0"
    port: 1143
    imap:
      enabled: true
    imaps:
      enabled: true
      port: 1144
  mail:
    from:
      default:
    to:
      default:

metadataKeystore:
  # keystorePassword: ""
  # keyPassword: ""
  defaultKeystorePassword: "mp6yc0UD9e"
  defaultKeyPassword: "mp6yc0UD9e"

alfresco-sync-service:
  syncservice:
    enabled : true
    image:
      repository: quay.io/alfresco/service-sync
      tag: 3.1.2

# If there is a need to pull images from a private docker repo, a secret can be defined in helm and passed as an argument
# to the install command:
# e.g.: helm install alfresco-content-services --set global.alfrescoRegistryPullSecrets=quay-registry-secret
# or uncomment the following line if you don't want/need to pass it as a parameter on every install command :
# global.alfrescoRegistryPullSecrets: quay-registry-secret
# for more information: https://github.com/Alfresco/alfresco-anaxes-shipyard/blob/master/SECRETS.md

# Global definition of Docker registry pull secret which can be accessed by dependent ACS Helm chart(s)
global:
  alfrescoRegistryPullSecrets:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  registryPullSecrets:
    - quay-registry-secret
