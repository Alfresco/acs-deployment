{{- if .Values.syncservice.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "syncservice.fullname" . }}
  labels:
    app: {{ template "syncservice.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "syncservice.fullname" . }}
      release: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
{{ toYaml .Values.global.strategy.rollingUpdate | indent 6 }}
  template:
    metadata:
      labels:
        app: {{ template "syncservice.fullname" . }}
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config-syncservice.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret-database.yaml") . | sha256sum }}
    spec:
    {{- if .Values.nodeSelector }}
      nodeSelector: {{- .Values.nodeSelector | toYaml | nindent 8 }}
    {{- end }}
      {{- include "alfresco-content-services.imagePullSecrets" . | indent 6 }}
      initContainers:
      {{- if .Values.activemq }}
      {{ fail "Using activemq.[host|port|user|password|external] in subcharts is not supported anymore. Use messageBroker.* instead" }}
      {{- end }}
      - name: init-activemq
        image: "{{ .Values.initContainers.activemq.image.repository }}:{{ .Values.initContainers.activemq.image.tag }}"
        imagePullPolicy: {{ .Values.initContainers.activemq.image.pullPolicy }}
        resources:
{{ toYaml .Values.initContainers.activemq.resources | indent 10 }}
        envFrom:
        - configMapRef:
            name: {{ template "syncservice.fullname" . }}-configmap
        - secretRef:
            name: {{ default (printf "%s-brokersecret" (include "content-services.shortname" .)) .Values.messageBroker.existingSecretName }}
        args:
          - -c
          - echo "Checking for ActiveMQ broker availability";
            IFS=, read -r -a array < <(echo "${BROKER_URL}" | sed -r 's/([a-z]+:\()*([^\)]*)(\)?.*)*/\2/');
            while [ -z $MQREADY ]; do
              for broker in "${array[@]}"; do broker_socket=${broker%%\?*};
                [[ "${broker_socket#*://}" == *":"* ]] || NCPORT=61616;
                echo "Trying ${broker_socket#*://} $NCPORT";
                nc -w1 ${broker_socket#*://} $NCPORT;
                if [ $? -eq 0 ]; then echo "ok";
                  MQREADY=1;
                  break;
                else echo "not ok";
                  sleep 5;
                fi;
              done;
            done
      {{- if eq .Values.database.external false }}
      - name: init-postgres
        image: "{{ .Values.initContainers.postgres.image.repository }}:{{ .Values.initContainers.postgres.image.tag }}"
        imagePullPolicy: {{ .Values.initContainers.postgres.image.pullPolicy }}
        resources:
{{ toYaml .Values.initContainers.postgres.resources | indent 10 }}
        command: ['sh', '-c', 'until nc -w1 {{ .Release.Name }}-postgresql-syncservice 5432; do echo "waiting for postgresql"; sleep 2; done;']
      {{- end }}
      terminationGracePeriodSeconds: 60
      containers:
      - name: syncservice
        image: "{{ .Values.syncservice.image.repository }}:{{ .Values.syncservice.image.tag }}"
        imagePullPolicy: {{ .Values.syncservice.image.pullPolicy }}
        envFrom:
        - secretRef:
            name: {{ template "syncservice.fullname" . }}-dbsecret
        - configMapRef:
            name: {{ template "syncservice.fullname" . }}-configmap
        - secretRef:
            name: {{ default (printf "%s-brokersecret" (include "content-services.shortname" .)) .Values.messageBroker.existingSecretName }}
        ports:
        - name: serviceport
          containerPort: 9090
        resources:
{{ toYaml .Values.syncservice.resources | indent 12 }}
        readinessProbe:
          httpGet:
            path: /alfresco/healthcheck
            port: serviceport
          initialDelaySeconds: {{ .Values.syncservice.readinessProbe.initialDelaySeconds }}
          failureThreshold: {{ .Values.syncservice.readinessProbe.failureThreshold }}
          periodSeconds: {{ .Values.syncservice.readinessProbe.periodSeconds }}
        livenessProbe:
          httpGet:
            path: /alfresco/healthcheck
            port: serviceport
          initialDelaySeconds: {{ .Values.syncservice.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.syncservice.livenessProbe.periodSeconds }}
        lifecycle:
          preStop:
            exec:
              command: ["/opt/alfresco-sync-service/sync_service_entrypoint.sh", "stop"]
{{- end }}
