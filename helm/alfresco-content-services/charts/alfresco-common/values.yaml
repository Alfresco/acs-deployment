# common values shared between all charts

global:
  gateway:
    # global.gateway.domain -- configure default domain for gateway host, i.e. "{{ .Release.Name }}.127.0.0.1.nip.io"
    domain: ""
    # global.gateway.host -- configure default gateway host Helm template, i.e. "gateway.{{ .Values.global.gateway.domain }}"
    host: ""
    # global.gateway.http -- toggle creating http or https ingress rules, supports literal or boolean values
    http: true
    # global.gateway.tlsacme -- used to enable automatic TLS for ingress if http is false
    tlsacme: false

  keycloak:
    enabled: true
    # global.keycloak.url -- overrides gateway host configuration
    url: ""
    # global.keycloak.path -- configure default keycloak path
    path: "/auth"
    # global.keycloak.host -- configure default keycloak host template, i.e "identity.{{ .Values.global.gateway.domain }}"
    host: ""
    # global.keycloak.realm -- configure default Keycloak realm
    realm: "activiti"
    # global.keycloak.resource -- configure default Keycloak resource
    resource: "activiti"
    # global.keycloak.extraEnv -- adds Keycloak extraEnv to deployments
    extraEnv: ""

  # global.registryPullSecrets -- configure pull secrets for all deployments
  registryPullSecrets: []

  # global.extraEnv -- adds global extraEnv to deployments
  extraEnv: ""

  messaging:
    # global.messaging.broker -- configure message broker type for all deployments with messaging.enabled set to 'true'
    broker: ""
    # global.messaging.partitioned -- Enable partitioned messaging configuration for engine events producer and consumers
    partitioned: false
    # global.messaging.partitionCount -- Set partition count for partitioned mode.
    partitionCount: 2
    # global.messaging.destinationPrefix -- Set destination separator to use to build full destinations, i.e. <prefix>_destination.
    destinationPrefix: ""
    # global.messaging.destinationSeparator -- Set destination separator to use to build full destinations, i.e. prefix<_>destination.
    destinationSeparator: "_"
    # global.messaging.destinationTransformersEnabled -- Enable destination name transformers to apply conversion to all destination name for producers, consumers and connectors
    destinationTransformersEnabled: false
    # global.messaging.destinationTransformers -- Comma separated list of transformer functions to apply conversion to all destination name for producers, consumers and connectors
    destinationTransformers: toLowerCase,escapeIllegalChars
    # global.messaging.destinationIllegalCharsRegex -- Configure regex expression to use for replacement of illegal characters in the destination names.
    destinationIllegalCharsRegex: "[\\t\\s*#:]"
    # global.messaging.destinationIllegalCharsReplacement -- Configure replacement character for illegal characters in the destination names.
    destinationIllegalCharsReplacement: "-"
    # global.messaging.destinations -- Configure destination properties to apply customization to producers and consumer channel bindings with matching destination key.
    destinations: {}

  rabbitmq:
    host: ""
    username: guest
    password: guest
    extraEnv: |

  kafka:
    brokers: ""
    port: 9092
    extraEnv: |

# extraEnv -- add env entries to deployments as string
extraEnv: ""

# env -- add env entries to deployments as dict
env: {}

# enabled -- generate resources only if true, false by default so you can just use the partials
enabled: false

# replicaCount -- number of replicas
replicaCount: 1

# extraInitContainers -- adds extraInitContainers to deployments
extraInitContainers: ""

liquibase:
  enabled: false
  image:
    # liquibase.image.repository -- image used to run liquibase database migrations
    # @default image.repository
    repository:
    # liquibase.image.tag -- Image tag for the liquibase image
    # @default image.tag
    tag:
    # liquibase.image.pullPolicy -- Image pull policy for the liquibase image
    pullPolicy: IfNotPresent
  # liquibase.args -- arguments for liquibase container
  args:
    - -jar
    - liquibase.jar
  # liquibase.env -- add env entries to liquibase init container as dict
  env: {}

pgchecker:
  image:
    # pgchecker.image.repository -- Image used to check Postgresql readiness at startup
    repository: docker.io/busybox
    # pgchecker.image.tag -- Image tag for the pgchecker image
    tag: 1.32
    # pgchecker.image.pullPolicy -- Image pull policy for the pgchecker image
    pullPolicy: IfNotPresent
  # pgchecker.securityContext -- SecurityContext for the pgchecker container
  securityContext:
    allowPrivilegeEscalation: false
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
  # pgchecker.resources -- Resource requests and limits for the pgchecker container
  resources:
    requests:
      cpu: "10m"
      memory: "16Mi"
    limits:
      cpu: "10m"
      memory: "16Mi"

image:
  repository: activiti/replaceme
  tag: latest
  pullPolicy: IfNotPresent

# registryPullSecrets -- configures additional pull secrets for this deployment
registryPullSecrets: []

statefulset:
  podManagementPolicy: Parallel
  updateStrategyType: RollingUpdate

config:
  volumeName: config
  mountPath: /opt/config/
  command: "sh"
  args: "-c"
  image:
    # config.image.repository -- Image used to run config init container at startup
    repository: docker.io/busybox
    # config.image.tag -- Image tag for the config image
    tag: 1.32
    # config.image.pullPolicy -- Image pull policy for the config image
    pullPolicy: IfNotPresent
  # config.securityContext -- SecurityContext for the config container
  securityContext:
    allowPrivilegeEscalation: false
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
  env:
    APPLICATION_PROPERTIES: '{{ .Values.config.mountPath | trimSuffix "/" }}/application.properties'

  # config.resources -- Resource requests and limits for the config container
  resources:
    requests:
      cpu: "10m"
      memory: "16Mi"
    limits:
      cpu: "10m"
      memory: "16Mi"

postgresql:
  enabled: false
  name: postgresql
  port: 5432

db:
  uri:
  username: postgres
  password:
  driver: org.postgresql.Driver
  platform: org.hibernate.dialect.PostgreSQLDialect
  generateDdl: false
  ddlAuto: validate

messaging:
  enabled: false
  # messaging.role -- required configuration of the messaging role, i.e. producer, consumer, or connector
  role: ""
  producer:
    config:
      script: |
        echo activiti.cloud.messaging.broker={{ .Values.global.messaging.broker }} >> $APPLICATION_PROPERTIES
        echo activiti.cloud.messaging.partitioned={{ .Values.global.messaging.partitioned }} >> $APPLICATION_PROPERTIES
        echo activiti.cloud.messaging.partition-count={{ .Values.global.messaging.partitionCount }} >> $APPLICATION_PROPERTIES
  consumer:
    config:
      script: |
        echo activiti.cloud.messaging.broker={{ .Values.global.messaging.broker }} >> $APPLICATION_PROPERTIES
        echo activiti.cloud.messaging.partitioned={{ .Values.global.messaging.partitioned }} >> $APPLICATION_PROPERTIES
        echo activiti.cloud.messaging.partition-count={{ .Values.global.messaging.partitionCount }} >> $APPLICATION_PROPERTIES
        echo activiti.cloud.messaging.instance-index=${HOSTNAME##*-} >> $APPLICATION_PROPERTIES

rabbitmq:
  # rabbbitmq.enabled -- enables rabbitmq backend configuration. Deprecated in favor of messaging.enabled in combination with global.messaging.broker values
  enabled: false
  host: '{{ tpl .Values.global.rabbitmq.host $ | default (include "common.rabbitmq.fullname" $) }}'
  username: "{{ .Values.global.rabbitmq.username }}"
  password: "{{ .Values.global.rabbitmq.password }}"
  extraEnv: "{{ tpl .Values.global.rabbitmq.extraEnv $ }}"

kafka:
  brokers: "{{ tpl .Values.global.kafka.brokers $ }}"
  port: "{{ .Values.global.kafka.port }}"
  extraEnv: "{{ tpl .Values.global.kafka.extraEnv $ }}"

javaOpts:
  xmx: 1024m
  xms: 256m
  other: >-
    -XX:+UnlockExperimentalVMOptions
    -Dsun.zip.disableMemoryMapping=true
    -XX:+UseParallelGC
    -XX:MinHeapFreeRatio=5
    -XX:MaxHeapFreeRatio=10
    -XX:GCTimeRatio=4
    -XX:AdaptiveSizePolicyWeight=90
  # javaOpts.extra -- provide extra options for Java runtime, i.e. -Djavax.net.ssl.truststore=/mnt/secrets/cacerts
  extra: ""

# probePath -- set default probe path for both liveness and readiness
# @default empty, each service should provide its own value or template, i.e. '{{ tpl .Values.ingress.path . }}/actuator/health'
probePath:
livenessProbe:
  # livenessProbe.path -- set liveness probe path, each service should provide its own value or default
  # @default empty, each service should provide its own value or template or default probePath
  path:
  initialDelaySeconds: 60
  periodSeconds: 15
  successThreshold: 1
  timeoutSeconds: 4
  failureThreshold: 4
readinessProbe:
  # readinessProbe.path -- set readiness probe path, each service should provide its own value or default
  # @default empty, each service should provide its own value or template or default probePath
  path:
  initialDelaySeconds: 20
  periodSeconds: 15
  successThreshold: 1
  timeoutSeconds: 3
  failureThreshold: 4
terminationGracePeriodSeconds: 20

service:
  name:
  # service.envType -- which type of env, currently supported ones are either backend which is the default or frontend
  envType: backend
  type: ClusterIP
  externalPort: 80
  internalPort: 8080
  nodePort:
  annotations: {}
  portName: http
  portProtocol: TCP

ingress:
  # ingress.enabled -- set to false to disable ingress record generation
  enabled: true
  # ingress.servicePort -- the Service port targeted by the Ingress, defaults to service.externalPort
  servicePort:
  # ingress.tls -- set to true in order to enable TLS on the ingress record
  tls:
  # ingress.path -- set ingress path
  path: /
  # ingress.subPaths -- set multiple ingress subpaths
  subPaths: []
  # ingress.tlsSecret -- if tls is set to true, you must declare what secret will store the key/certificate for TLS
  tlsSecret:
  # ingress.hostName -- if set, overrides .Values.global.gateway.host configuration
  hostName:
  # ingress.annotations -- configure ingress annotations as key:value pairs
  annotations: {}

# resources -- configure resources requests and limits for deployment
resources: {}

#  limits:
#    cpu: 1
#    memory: 1024Mi
#  requests:
#    cpu: 150m
#    memory: 256Mi

# podAnnotations -- configure deployment pod podAnnotations as dict
podAnnotations: {}

# podLabels -- configure deployment pod podLabels as dict
podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

# nodeSelector -- allows customising nodeSelector
nodeSelector: {}

# tolerations -- allows customising tolerations
tolerations: []

# affinity -- allows customising affinity
affinity: {}

# extraVolumes -- add additional volumes as yaml string
extraVolumes: |

# extraVolumeMounts -- add additional volume mounts as yaml string
extraVolumeMounts: |

# volumes -- add additional volumes as list
volumes: []

# volumeMounts -- add additional volume mounts as list
volumeMounts: []

# initContainers -- add additional initContainers as list
initContainers: []

# sidecars -- add additional sidecar containers as list
sidecars: []

hpa:
  enabled: false
