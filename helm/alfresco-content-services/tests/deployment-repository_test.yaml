---
suite: test repository manifest
templates:
  - deployment-repository.yaml
  - config-repository.yaml
  - secret-database.yaml
  - secret-s3.yaml
  - secret-repository.yaml
  - config-dev-log4j-properties.yaml
tests:
  - it: should have basic metadata in place in deployment
    values: &testvalues
      - values/test_values.yaml
    asserts:
      - equal:
          path: metadata.name
          value: RELEASE-NAME-alfresco-cs-repository
        template: deployment-repository.yaml

  - it: Log4j & Log4j2 test
    values: *testvalues
    set:
      repository:
        extraLogStatements:
          org.alfresco.repo.content.transform.TransformerDebug: debug
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: repository-logging-properties-volume
            configMap:
              name:  RELEASE-NAME-alfresco-custom-log4j-properties-configmap
              items:
              - key: custom-log4j.properties
                path: custom-log4j.properties
              - key: custom-log4j2.properties
                path: custom-log4j2.properties
        template: deployment-repository.yaml
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: repository-logging-properties-volume
            mountPath: /usr/local/tomcat/shared/classes/alfresco/extension/custom-log4j.properties
            subPath: custom-log4j.properties
        template: deployment-repository.yaml
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: repository-logging-properties-volume
            mountPath: /usr/local/tomcat/shared/classes/alfresco/extension/custom-log4j2.properties
            subPath: custom-log4j2.properties
        template: deployment-repository.yaml

  - it: should have default mail secret in env when email server is enabled
    values: *testvalues
    set:
      mail:
        host: smtp.example.org
        password: smtpPassword
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: RELEASE-NAME-alfresco-cs-mail-password
        template: deployment-repository.yaml

  - it: should have overridden secret in env when email server is enabled
    values: *testvalues
    set:
      mail:
        host: smtp.example.org
        existingSecretName: whatever
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: whatever
        template: deployment-repository.yaml

  - it: should have overridden secret in env when email server is enabled
    values: *testvalues
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: RELEASE-NAME-alfresco-cs-mail-password
        template: deployment-repository.yaml

  - it: should have default secret in env
    values: *testvalues
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: RELEASE-NAME-alfresco-cs-repository-secret
        template: deployment-repository.yaml

  - it: should have overridden secret in env
    values: *testvalues
    set:
      repository.existingSecretName: whatever
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: whatever
        template: deployment-repository.yaml

  - it: should have s3 secret in env
    values: *testvalues
    set:
      s3connector:
        enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: RELEASE-NAME-alfresco-cs-s3secret
        template: deployment-repository.yaml

  - it: should have overridden s3 secret in env
    values: *testvalues
    set:
      s3connector:
        enabled: true
        existingSecretName: whatever
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: whatever
        template: deployment-repository.yaml

  - it: should have a volume and a volumeMount for license
    values: *testvalues
    set:
      repository:
        licenseSecret: somesecret
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: acs-license
            secret:
              secretName: somesecret
              defaultMode: 0400
        template: deployment-repository.yaml
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            mountPath: >-
              /usr/local/tomcat/shared/classes/alfresco/extension/license/
            name: acs-license
        template: deployment-repository.yaml

  - it: should have a volume and a volumeMount for alfresco-global.properties
    values: *testvalues
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: repository-properties
            secret:
              secretName: RELEASE-NAME-alfresco-repository-properties-secret
              defaultMode: 0400
              items:
                - key: alfresco-global.properties
                  path: alfresco-global.properties
        template: deployment-repository.yaml
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: repository-properties
            mountPath: /usr/local/tomcat/shared/classes/alfresco-global.properties
            subPath: alfresco-global.properties
        template: deployment-repository.yaml

  - it: should render cpu and memory limits
    values: *testvalues
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources
          value:
            requests:
              cpu: "250m"
              memory: "2Gi"
            limits:
              cpu: "4"
              memory: "8Gi"
        template: deployment-repository.yaml

  - it: should have wait-db-ready initcontainer with in-cluster db
    values: *testvalues
    set:
      database.external: false
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: wait-db-ready
        template: deployment-repository.yaml

  - it: should not have wait-db-ready initcontainer with external database
    values: *testvalues
    set:
      database.external: true
    asserts:
      - isEmpty:
          path: spec.template.spec.initContainers
        template: deployment-repository.yaml
      - isNotEmpty:
          path: spec.template.spec.volumes
        template: deployment-repository.yaml

  - it: should have custom init containers when defined
    values: *testvalues
    set:
      repository.extraInitContainers:
        - name: dummy-init-container
          image: busybox:1.28
          command: ['sh', '-c', 'echo The app is running! && sleep 3600']
    asserts:
      - contains:
          path: spec.template.spec.initContainers
          content:
            name: dummy-init-container
            image: busybox:1.28
            command: ['sh', '-c', 'echo The app is running! && sleep 3600']
        template: deployment-repository.yaml

  - it: should have custom extra volumes when defined
    values: *testvalues
    set:
      repository.extraVolumes:
        - name: test-volume
          awsElasticBlockStore:
            volumeID: "whatever"
            fsType: ext4
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: test-volume
            awsElasticBlockStore:
              volumeID: "whatever"
              fsType: ext4
        template: deployment-repository.yaml
